#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket
import ipaddress
import copy

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################
'''
 This class contains all the relevant information about what kind of routing information is needed for the routing table.
 It also contains any helper functions needed to make and aggregate the routing table.
'''
class RoutingInfo:
  """ This class will be the data of the routing table """
  def __init__(self, packet, srcif = None):
    if srcif == None:
      self.revoke_init(packet)
    else:
      self.update_init(srcif, packet)

  def update_init(self, srcif, packet):
    msg = packet['msg']
    netmask = ipaddress.IPv4Address(msg['netmask'])
    binary_netmask = str(bin(int(netmask)))
    self.mask_count = 0
    for i in binary_netmask:
       if i == "1":
         self.mask_count += 1
    self.cidr_network = ipaddress.ip_network(msg['network'] + "/" + str(self.mask_count))
    self.network = str(self.cidr_network).split("/")[0]
    self.netmask = msg['netmask']
    self.nextHop = srcif
    self.asPath = msg['ASPath']
    self.localPref = msg["localpref"]
    self.origin = msg["origin"]
    self.selfOrigin = msg["selfOrigin"]

  def revoke_init(self, packet_network_msg):
    msg = packet_network_msg
    netmask = ipaddress.IPv4Address(msg['netmask'])
    binary_netmask = str(bin(int(netmask)))
    self.mask_count = 0
    for i in binary_netmask:
       if i == "1":
         self.mask_count += 1
    self.cidr_network = ipaddress.ip_network(msg['network'] + "/" + str(self.mask_count))
    self.network = str(self.cidr_network).split("/")[0]#  msg['network']
    self.netmask = msg['netmask']

  def aggregate(self, other_route):
    newRoute = copy.deepcopy(self)
    newRoute.mask_count = self.mask_count - 1
    binary_netmask = []
    for i in range(newRoute.mask_count):
      binary_netmask.append("1")
    for i in range(32-newRoute.mask_count):
      binary_netmask.append("0")
    binary_netmask = ipaddress.IPv4Address(int(int("".join(binary_netmask), 2)))
    newRoute.netmask = str(binary_netmask)
    newRoute.cidr_network = ipaddress.ip_network(newRoute.network + "/" + str(newRoute.mask_count))
    
    return newRoute

  def can_aggregate(self, other):
    h = self.nextHop == other.nextHop
    l = self.localPref == other.localPref
    m = self.mask_count == other.mask_count
    p = self.asPath == other.asPath
    o = self.origin == other.origin
    bin_hm = list(str(bin(int(self.cidr_network.network_address))))
    bin_hm_other = list(str(bin(int(other.cidr_network.network_address))))
    for (sbd, obd, count) in zip(bin_hm[2:], bin_hm_other[2:], range(self.mask_count)):
      if sbd != obd and count == (self.mask_count - 1):
        return h and l and m and p and o
    return False
    

  def __eq__(self, other):
    n = self.cidr_network == other.cidr_network
    h = self.nextHop == other.nextHop
    l = self.localPref == other.localPref
    m = self.mask_count == other.mask_count
    p = self.asPath == other.asPath
    o = self.origin == other.origin
    return n and h and l and m and p and o

  def revokable(self, other):
    n = self.cidr_network == other.cidr_network
    m = self.mask_count == other.mask_count
    return n and m

  def __str__(self):
    return f'Routing info is =>  network: {self.network}, netmask: {self.netmask}, nextHop: {self.nextHop}, asPath: {self.asPath}, localPref: {self.localPref}'


class Router:
    """ Your Router """

    def __init__(self, networks, asn):
        # Our routing table is a dictionary to a list of RoutingInfo objects above.
        # Our routing table has a key of a cidr network.
        self.routes = {} 
        # Updates is also a hashmap where the key is the src ip and the value if a list of all the update messages from 
        # that ip.
        self.updates = {}
        # Same as updates, key is src, value is a list of revokes
        self.revokes = {}
        # Relationships is a hashmap where the key is the src and the value is the relationship.
        self.relations = {}
        # A dictionary of all the sockets.
        self.sockets = {}
        # Our asn number.
        self.asn = int(asn[0])
        for relationship in networks:
            network, relation = relationship.split("-")
            self.sockets[network] = socket.socket(
                socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        destination = ipaddress.IPv4Address(daddr)
        outroutes = []
        routes = []
        for network in self.routes.keys():
          if destination in network:
            routes.extend(self.routes[network])

        longest_mask_count = 0
        for route in routes:
          if route.mask_count > longest_mask_count:
            outroutes = [route]
            longest_mask_count = route.mask_count
          elif route.mask_count == longest_mask_count:
            outroutes.append(route)

        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        outroutes = []
        shortest_length = 99999999
        for route in routes:
           aspath_length = len(route.asPath)
           if aspath_length < shortest_length:
             shortest_length = aspath_length
             outroutes = [route]
           elif aspath_length == shortest_length:
             outroutes.append(route)
        return outroutes

    def get_highest_preference(self, routes):
        """ select the route with the shortest AS Path """
        outroutes = []
        highest_local = 0
        for route in routes:
          lp = route.localPref
          if lp > highest_local:
            highest_local = route.localPref
            outroutes = [route]
          elif lp == highest_local:
            outroutes.append(route)
        return outroutes

    def get_self_origin(self, routes):
        """ select self originating routes """
        outroutes = []
        we_true_yet = False
        for route in routes:
          if we_true_yet and route.selfOrigin:
             outroutes.append(route)
          elif route.selfOrigin:
             we_true_yet = True
             outroutes = [route]
          else:
             outroutes.append(route)

        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: IGP > EGP > UNK """
        outroutes = []
        
        ranks = ["IGP", "EGP", "UNK"]
        current_rank = 4
        for route in routes:
          if ranks.index(route.origin) < current_rank:
            current_rank = ranks.index(route.origin)
            outroutes = [route]
          elif ranks.index(route.origin) ==  current_rank:
            outroutes.append(route)

        return outroutes

    def get_lowest_ip(self, routes):
      """ gets the lowerst ip address in the given list of ip addresses """
      outroutes = []
      lowest_ip = ipaddress.IPv4Address("255.255.255.255")
      for route in routes:
        nh_address = ipaddress.IPv4Address(route.nextHop)
        if nh_address < lowest_ip:
          outroutes = [route]
          lowest_ip = nh_address
      return outroutes
        

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        srcif_relationship = self.relations[srcif]

        for route in routes:
          peer = route.nextHop
          peer_relationship = self.relations[peer]
          if srcif_relationship == CUST or peer_relationship == CUST:
            outroutes.append(route)
        return outroutes

    def get_route(self, srcif, daddr):
        """ Select the best route for a given address """
        peer = None
        routes = self.lookup_routes(daddr)
        # Rules go here
        if routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. EGP > IGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            routes = self.get_lowest_ip(routes)
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
        if len(routes) == 1:
          peer = routes[0].nextHop

        return self.sockets[peer] if peer else None

    def forward(self, srcif, packet):
      """ Forward a data packet """
      counter = 0
      peer = self.get_route(srcif, packet["dst"])
      if peer == None:
        return False
      else:
        peer.send(json.dumps(packet).encode())
        return True

    def coalesce(self):
        """ coalesce any routes that are right next to each other """
        prefix_len_dict = {}
        for network, routes in self.routes.items():
          for route in routes:
            if route.mask_count in prefix_len_dict.keys():
              prefix_len_dict[route.mask_count].append(route)
            else:
              prefix_len_dict[route.mask_count] = [route]

        did_we_coalesce = False
        for mask_count, routes in prefix_len_dict.items():
          other_routes = routes.copy()
          for route in routes:
            other_routes.remove(route)
            for other_route in other_routes:
              if route.can_aggregate(other_route):
                 # remove route and other route from self.routes
                 # then add the new coalesced route to self.routes
                 newRoute = route.aggregate(other_route)
                 self.routes[route.cidr_network].remove(route)
                 self.routes[other_route.cidr_network].remove(other_route)
                 if newRoute.cidr_network in self.routes.keys():
                   self.routes[newRoute.cidr_network].append(newRoute)
                 else:
                   self.routes[newRoute.cidr_network] = [newRoute]
                 did_we_coalesce = True
                 other_routes.remove(other_route)
                 routes.remove(route)
        return did_we_coalesce

    def update(self, srcif, packet):
      """ handle update packets """
      
      # If this packet has already passed through here before, drop it.
      update_msg = packet['msg']
      if self.asn in update_msg["ASPath"]:
        return False
      

      
      if srcif not in self.updates.keys():
        self.updates[srcif] = [packet]
      else: 
        self.updates[srcif].append(packet)

      routingInfoObject = RoutingInfo(packet, srcif=srcif) # Make the routing info object.
      routingTableKey = routingInfoObject.cidr_network # Get the key from the object.

      if routingTableKey in self.routes.keys():
        if not routingInfoObject in self.routes[routingTableKey]:
          self.routes[routingTableKey].append(routingInfoObject)
        else:
          return False
      else:
        # Add an entry into our routing table
        self.routes[routingTableKey] = [routingInfoObject]

      # Create the packet to broadcast.
      update_packet = {}
      update_packet['type'] = 'update'
      update_msg["ASPath"].append(self.asn)
      update_packet['msg'] = update_msg

      srcif_relationship = self.relations[srcif]

      for network, s in self.sockets.items():
        if srcif != network:
          update_packet['src'] = self.create_ip_src(network)
          update_packet['dst'] = network

          network_relationship = self.relations[network]
          if srcif_relationship == CUST or network_relationship == CUST:
            s.send(json.dumps(update_packet).encode())
      while self.coalesce():
        self.coalesce()
      return True

    def create_ip_src(self, ip):
        """Change ip to src ip"""
        iplist = ip.split(".")
        iplist[3] = "1"
        return ".".join(iplist)
    
    def revoke(self, packet):
        """ handle revoke packets """
        peer = packet['src']
        if peer not in self.revokes.keys():
          self.revokes[peer] = [packet]
        else:  
          self.revokes[peer].append(packet)


        network_route_pairs = self.get_networks_on_peer(peer)
        networks_to_revoke = []
        for network in packet["msg"]:
          self.updates[peer] = list(filter(lambda x: (x["msg"]["network"] != network["network"] or x["msg"]["netmask"] != network["netmask"]), self.updates[peer]))
          networks_to_revoke.append(RoutingInfo(network))

        self.remake_routing_table()

        for network_route_pair in network_route_pairs:
          for network_to_revoke in networks_to_revoke:
            if network_route_pair[1].revokable(network_to_revoke):
              self.remove_route(network_route_pair)
              #return True
        
        for network, s in self.sockets.items():
          if peer != network:
            packet['src'] = self.create_ip_src(network)
            packet['dst'] = network
            s.send(json.dumps(packet).encode())
        return True

    def remake_routing_table(self):
      """ Remake the routing table when the networks on it are coalesceing or disaggregating """
      newRoutingTable = {}
      for srcif, updates in self.updates.items():
        for update in updates:
          newRoute = RoutingInfo(update, srcif = update['src'])
          if newRoute.cidr_network in newRoutingTable.keys():
            newRoutingTable[newRoute.cidr_network].append(newRoute)
          else:
            newRoutingTable[newRoute.cidr_network] = [newRoute]
      self.routes = newRoutingTable
      while self.coalesce():
        self.coalesce() 
      

    def get_networks_on_peer(self, peer):
        """ get all networks that go to this peer """
        routes = []
        for network, routes_list in self.routes.items():
            for route_info in routes_list:
                if route_info.nextHop == peer:
                    routes.append([network, route_info])
        return routes

    def remove_route(self, network_route_pair):
        """ deletes routes in the routing table with no routing information on them """
        network = network_route_pair[0]
        routeInfo = network_route_pair[1]
        if self.routes[network] != [] or self.routes[network] != None:
          self.routes[network].remove(routeInfo)
          del self.routes[network]
        else:
          del self.routes[network]


    def dump(self, packet):
        """ handles dump table requests """
        table_dump = {}
        table_dump['dst'] = packet['src']
        table_dump['src'] = packet['dst']
        table_dump['type'] = TABL
        table_msg = []
        for cidr_network, routeObjects in self.routes.items():
            for routeObject in routeObjects:
                msg = {}
                msg["network"] = routeObject.network
                msg["netmask"] = routeObject.netmask
                msg["peer"] = routeObject.nextHop
                table_msg.append(msg)

        table_dump['msg'] = table_msg

        table_json = json.dumps(table_dump)
        s = self.sockets[packet['src']]
        s.send(table_json.encode())
        return True

    def handle_packet(self, srcif, packet):
      """ dispatches a packet by determing the packets type """
      if (packet['type'] == UPDT):
        return self.update(srcif, packet)
      elif (packet['type'] == DUMP):
        return self.dump(packet)
      elif (packet['type'] == DATA):
        return self.forward(srcif, packet)
      elif (packet['type'] == RVKE):
        return self.revoke(packet)


    def send_error(self, conn, msg):
        """ Send a no_route error message """
        msg['dst'] = msg['src']
        listofsockets = [network for (network, socket) in self.sockets.items() if socket == conn]
        msg['src'] = self.create_ip_src(listofsockets[0])
        msg['type'] = NRTE 
        msg['msg'] = {}
        conn.send(json.dumps(msg).encode())
        return

    def run(self):
        """ main loop for the router """
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    
                    # Try to handle the packet, but if you can't, then 
                    # return a no route message to the sending neighbor.
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return False


if __name__ == "__main__":
    PARSER = argparse.ArgumentParser(description='route packets')
    PARSER.add_argument('asn', metavar='asn', type=str, nargs=1, help="asn")
    PARSER.add_argument('networks', metavar='networks',
                        type=str, nargs='+', help="networks")
    ARGS = PARSER.parse_args()
    Router(ARGS.networks, ARGS.asn).run()
