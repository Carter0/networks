#!/usr/bin/env python3

import sys
import socket
import datetime
import json
import time


'''
Note: We are going to need to implement sliding window 
and dropped packets in here
'''

'''
Dropped packets

'''

# keep a copy of the last packet sent incase it gets dropped.
lastMsg = None

# Keep an estimate of the roundtriptime
rtt = 4

MSG_SIZE = 1500
DATA_SIZE = 1472
TIMEOUT = rtt


def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
  sys.stderr.flush()

def send_next_packet(seqn, sock, dest):

  msg = {"sequence": seqn, "data": "", "ack": False, "eof": False, "resend": False}
  overhead = len(json.dumps(msg))
  msg["data"] = sys.stdin.read(DATA_SIZE - overhead)

  # Save a copy of the msg
  global lastMsg
  lastMsg = msg

  # most of the time it will get into the if statement,
  # it only won't when there is nothing else to read in from standard in, 
  # ie. that is the last packet to send
  if len(msg["data"]) > 0:
    assert (len(msg) <= DATA_SIZE), f"ERROR: Datagram is longer ({len(msg)}) than {DATA_SIZE} bytes!!!"

    if sock.sendto(json.dumps(msg).encode('ascii'), dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(seqn) + " (" + str(len(msg["data"])) + ")")
    return seqn + len(msg["data"])
  log("Not into the if")
  return seqn

def main():
  # Bind to localhost and an ephemeral port
  ip_port = sys.argv[1]
  udp_ip = ip_port[0:ip_port.find(":")]
  udp_port = int(ip_port[ip_port.find(":")+1:])
  dest = (udp_ip, udp_port)
  seqn = 0

  global rtt

  # Set up the socket
  sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  sock.settimeout(TIMEOUT)

  result = None

  # Start the timer needed to calc RTT 
  startTime = time.time()

  # Send first packet
  seqn = send_next_packet(seqn, sock, dest)


  # Now read in data, send packets
  while True:
    log("ABOUT TO SLEEP")

    try:
      # recvfrom blocks until it gets something
      result = sock.recvfrom(MSG_SIZE)
      # Only sets the rtt if it managed to send the packet
      rtt = 3 * (time.time() - startTime)
    except socket.timeout as timeoutException:
      log("Caught a dropped packet")
      log("[send last data] " + str(lastMsg['sequence']) + " (" + str(len(lastMsg["data"])) + ")")
      lastMsg["resend"] = True
      sock.sendto(json.dumps(lastMsg).encode('ascii'), dest)
      continue

    if result:
      (data, _addr) = result
      data = data.decode('ascii')

      try:
        decoded = json.loads(data)

        # If there is an ack, send next packet
        if decoded['ack'] == seqn:
          log(f"[recv ack] {seqn}")

          # Try to send next packet; break if no more data
          startTime = time.time()
          new_seq = send_next_packet(seqn, sock, dest)
          if new_seq == seqn:
            break
          seqn = new_seq
      except (ValueError, KeyError, TypeError):
        log("[recv corrupt packet]")
    else:
      log("[error] timeout")
      sys.exit(-1)

    log(f"(seqn {seqn})")

  sock.sendto(json.dumps({"eof": True, "data": "", "sequence": seqn, "ack": False, "resend": False}).encode('ascii'), dest)
  sys.exit(0)

if __name__ == '__main__':
  main()
