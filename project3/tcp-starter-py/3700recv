#!/usr/bin/env python3

import sys
import socket
import datetime
import json
import time

rtt = 10
MSG_SIZE = 1500
TIMEOUT = 10
lastAck = None



def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
  sys.stderr.flush()


def main():

  # Keep a counter of all the SEQN you have recieved and increment it
  # with each packet. Only accept packets that match your expected SQN.
  sqnCounter = 0

  global rtt
  global lastAck

  # Bind to localhost and an ephemeral port
  udp_ip = "127.0.0.1"
  udp_port = 0

  # Set up the socket
  sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  sock.bind((udp_ip, udp_port))

  # Set the timeout for recieve
  # Resend the last ack if it never got the right next packet
  sock.settimeout(TIMEOUT)

  # Get port we bound to
  udp_port = sock.getsockname()[1]
  log(f"[bound] {udp_port}")

  result = None

  # start the time calculations
  startTime = 0

  # Now listen for packets
  while True:
    try:
      result = sock.recvfrom(MSG_SIZE)
      rtt = 3 * (time.time() - startTime)
    except socket.timeout as timeoutExc:
      # resend the last ack 
      # TODO: sometimes this is None and it breaks and I don't know why its none
      log("Resending Ack " + lastAck)
      # TODO; Also it doesnt seem like resending the ack does anything which is GOOD :)
      sock.sendto(lastAck.encode('ascii'), addr)
      continue

    # If nothing is ready, we hit the timeout
    if result:
      (data, addr) = result
      data = data.decode('ascii')

      try:
        decoded = json.loads(data)

        # if the sqn is the one you expect, do everything
        # else just drop it
        log(f"Sequence number is: { decoded['sequence'] }")
        log(f"Sequence Counter is: {sqnCounter}")
        log(f"Resend  is: { decoded['resend']}")
        if decoded['sequence'] == sqnCounter or decoded['resend'] == True or decoded['eof']:

          # increment the sqn number if its not a resent packet
          if decoded['resend'] == False and not decoded['eof']:
            sqnCounter += decoded['sequence'] + len(decoded['data']) 
          # If the EOF flag is set, exit
          if decoded['eof']:
            log("[completed]")
            sys.exit(0)

          # If there is data, we accept it and print it out
          if decoded['data']:
            # If we receive data, we assume it's in-order
            # You will need to do much more here
            log(f"[recv data] {decoded['sequence']} ({len(decoded['data'])}) ACCEPTED (in-order)")
            sys.stdout.write(decoded['data'])


          msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})
          lastAck = msg
          log("ABOUT TO SEND " + msg)
          # Possibility that the ack packet is dropped motherfucker
          startTime = time.time()
          if sock.sendto(msg.encode('ascii'), addr) < len(msg):
            log("[error] unable to fully send packet")

      except (ValueError, KeyError, TypeError) as exc:
        log("[recv corrupt packet]")
        raise exc
    else:
      log("[error] timeout")
      sys.exit(-1)

if __name__ == '__main__':
  main()
