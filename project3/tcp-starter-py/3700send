#!/usr/bin/env python3

import sys
import socket
import datetime
import json
import time


# keep a copy of the last packet sent incase it gets dropped.
lastMsg = None

MSG_SIZE = 1500
DATA_SIZE = 1472

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
  sys.stderr.flush()

def send_next_packet(seqn, sock, dest):

  msg = {"sequence": seqn, "data": "", "ack": False, "eof": False, "resend": False}
  overhead = len(json.dumps(msg))
  msg["data"] = sys.stdin.read(DATA_SIZE - overhead)
  #log("DATA IS")
  #log(msg['data'])

  # Save a copy of the msg
  global lastMsg
  lastMsg = msg

  # most of the time it will get into the if statement,
  # it only won't when there is nothing else to read in from standard in, 
  # ie. that is the last packet to send
  if len(msg["data"]) > 0:
    assert (len(msg) <= DATA_SIZE), f"ERROR: Datagram is longer ({len(msg)}) than {DATA_SIZE} bytes!!!"

    if sock.sendto(json.dumps(msg).encode('ascii'), dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(seqn) + " (" + str(len(msg["data"])) + ")")
    return seqn + len(msg["data"])
  return seqn

def main():
  # Bind to localhost and an ephemeral port
  ip_port = sys.argv[1]
  udp_ip = ip_port[0:ip_port.find(":")]
  udp_port = int(ip_port[ip_port.find(":")+1:])
  dest = (udp_ip, udp_port)
  seqn = 0

  global lastMsg

  # Set up the socket
  sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  sock.settimeout(30)


  # St up stuff for the rtt calculations
  startTime = time.time()
  rttm = 0
  rtts = 0
  first = True

  # Send first packet
  seqn = send_next_packet(seqn, sock, dest)


  # Now read in data, send packets
  while True:
    #log("ABOUT TO SLEEP")

    try:
      # recvfrom blocks until it gets something
      result = sock.recvfrom(MSG_SIZE)
      rttm = time.time() - startTime
      if first:
        rtts = rttm
        first = False
      # Only sets the rtt if it managed to send the packet
      rtts = (0.875 * rtts) + 0.125 * rttm
      sock.settimeout(3 * rtts)
    except socket.timeout as timeoutException:
      lastMsg['resend'] = True
      sock.sendto(json.dumps(lastMsg).encode('ascii'), dest)
      continue

    if result:
      (data, _addr) = result
      data = data.decode('ascii')

      try:
        decoded = json.loads(data)

        if decoded['fin']:
          time.sleep(3)
          log("[completed]")
          sys.exit(0)

        # If there is an ack, send next packet
        if decoded['ack'] == seqn:

          # Try to send next packet; break it no more data
          new_seq = send_next_packet(seqn, sock, dest)

          if new_seq == seqn:
            log("Send final packet")
            finalMsg = {"eof": True, "data": "", "sequence": seqn, "ack": False, 'resend': False}
            encode = json.dumps(finalMsg)

            # Save a copy of the final msg incase it does not make it
            lastMsg = finalMsg
            sock.sendto(encode.encode('ascii'), dest)

          # Current sequence number now includes the read in data
          seqn = new_seq

      except (ValueError, KeyError, TypeError) as exc:
        log(exc)
        log("[recv corrupt packet]")
    else:
      log("[error] timeout")
      sys.exit(-1)

    log(f"(seqn {seqn})")





if __name__ == '__main__':
  main()
